{"version":3,"sources":["webpack:///./src/app/core/services/ride.service.ts","webpack:///./src/app/pages/tabs/home/ride-details/ride-details.module.ts","webpack:///./src/app/pages/tabs/home/ride-details/ride-details.page.html","webpack:///./src/app/pages/tabs/home/ride-details/ride-details.page.scss","webpack:///./src/app/pages/tabs/home/ride-details/ride-details.page.ts"],"names":[],"mappings":"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","file":"pages-tabs-home-ride-details-ride-details-module.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Ride} from '../../shared/models/Ride';\nimport {AngularFireDatabase} from '@angular/fire/database';\nimport {Observable} from 'rxjs';\nimport {Request} from '../../shared/models/Request';\nimport {User} from '../../shared/models/User';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RideService {\n    private collectionEndPoint = 'rides';\n\n    constructor(private db: AngularFireDatabase) {\n    }\n\n    public createRide(ride: Ride): Promise<void> {\n        ride.id = this.db.createPushId();\n        return this.db.object<Ride>(`${this.collectionEndPoint}/${ride.id}`).set(ride);\n    }\n\n    public updateRide(ride: Ride): Promise<void> {\n        return this.db.object<Ride>(`${this.collectionEndPoint}/${ride.id}`).update(ride);\n    }\n\n    public deleteRide(rideId: string): Promise<void> {\n        return this.db.object<Ride>(`${this.collectionEndPoint}/${rideId}`).remove();\n    }\n\n    public getRides(): Observable<Ride[]> {\n        return this.db.list<Ride>(this.collectionEndPoint, ref => ref.orderByChild('dateTime')\n            .startAt(new Date().getTime())).valueChanges();\n    }\n\n    public getRidesByUserId(userId: string): Observable<Ride[]> {\n        return this.db.list<Ride>(this.collectionEndPoint, ref => ref.orderByChild('userId').equalTo(userId)).valueChanges();\n    }\n\n    public getRide(rideId: string): Observable<Ride> {\n        return this.db.object<Ride>(`${this.collectionEndPoint}/${rideId}`).valueChanges();\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule} from '@angular/forms';\nimport {Routes, RouterModule} from '@angular/router';\n\nimport {IonicModule} from '@ionic/angular';\n\nimport {RideDetailsPage} from './ride-details.page';\nimport {AgmCoreModule} from '@agm/core';\nimport {AgmDirectionModule} from 'agm-direction';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: RideDetailsPage\n    }\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        AgmCoreModule.forRoot({\n            apiKey: 'AIzaSyBEavHbLwLZhyr1L8psKmof-84BlLqbRn8',\n            libraries: ['places']\n        }),\n        AgmDirectionModule,\n        RouterModule.forChild(routes)\n    ],\n    declarations: [RideDetailsPage]\n})\nexport class RideDetailsPageModule {\n}\n","module.exports = \"<ion-header>\\n    <ion-toolbar color=\\\"primary\\\">\\n        <ion-title>Ride Details</ion-title>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button></ion-back-button>\\n        </ion-buttons>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n    <ion-card>\\n        <div class=\\\"map\\\">\\n            <agm-map [latitude]=\\\"latitude\\\" [longitude]=\\\"longitude\\\" [zoom]=\\\"zoom\\\" [streetViewControl]=\\\"false\\\"\\n                     [zoomControl]=\\\"false\\\">\\n                <agm-direction *ngIf=\\\"direction\\\" [origin]=\\\"direction.origin\\\"\\n                               [destination]=\\\"direction.destination\\\"></agm-direction>\\n                <agm-marker [latitude]=\\\"latitude\\\" [longitude]=\\\"longitude\\\" *ngIf=\\\"!direction\\\"></agm-marker>\\n            </agm-map>\\n            <ion-fab vertical=\\\"top\\\" horizontal=\\\"end\\\" slot=\\\"fixed\\\">\\n                <ion-fab-button>\\n                    <ion-icon name=\\\"pin\\\"></ion-icon>\\n                </ion-fab-button>\\n            </ion-fab>\\n        </div>\\n        <ion-item class=\\\"card-driver-container\\\">\\n            <div class=\\\"user-info\\\" (click)=\\\"goToDriverDetailsPage()\\\">\\n                <ion-avatar slot=\\\"start\\\">\\n                    <img [src]=\\\"user?.photo\\\">\\n                </ion-avatar>\\n                <div class=\\\"user-name\\\">\\n                    <label>{{user?.name}}</label>\\n                    <div>\\n                        <ion-icon name=\\\"star\\\" slot=\\\"start\\\"></ion-icon>\\n                        <label>{{user?.averageRating}}/5 ({{user?.numberOfRatings}})</label>\\n                    </div>\\n                </div>\\n            </div>\\n            <ion-button (click)=\\\"contactTheDriver()\\\">Contact</ion-button>\\n        </ion-item>\\n        <ion-item>\\n            <label>From: {{ride.originName}}</label>\\n        </ion-item>\\n        <ion-item>\\n            <label>To: {{ride.destinationName}}</label>\\n        </ion-item>\\n        <ion-item>\\n            <label>Date and time: {{ride?.dateTime | date:'dd MMM h:mm'}}</label>\\n        </ion-item>\\n        <ion-item >\\n            <label>Seats Available: {{availableSeats}}/{{ride?.numberOfSeats}}</label>\\n            <label *ngIf=\\\"availableSeats == 0\\\" id=\\\"no-seats-text\\\" slot=\\\"end\\\">no seats available</label>\\n        </ion-item>\\n\\n        <div class=\\\"footer\\\" *ngIf=\\\"!isBooked && availableSeats > 0 && ride.userId != currentUser.id\\\">\\n            <ion-button (click)=\\\"createRequest()\\\">Book</ion-button>\\n        </div>\\n        <p *ngIf=\\\"isBooked\\\" text-center>You have already booked this ride ;)</p>\\n    </ion-card>\\n\\n</ion-content>\\n\\n\\n\"","module.exports = \"ion-card agm-map {\\n  height: 300px; }\\n\\nion-card .card-driver-container {\\n  display: -webkit-flex;\\n  display: flex;\\n  -webkit-justify-content: space-between;\\n          justify-content: space-between; }\\n\\nion-card .card-driver-container .user-info {\\n    margin: 10px;\\n    display: -webkit-flex;\\n    display: flex;\\n    -webkit-align-items: center;\\n            align-items: center;\\n    width: 100%; }\\n\\nion-card .card-driver-container .user-info ion-avatar {\\n      width: 35px;\\n      height: 35px; }\\n\\nion-card .card-driver-container .user-info .user-name {\\n      margin-left: 10px;\\n      display: -webkit-flex;\\n      display: flex;\\n      -webkit-flex-direction: column;\\n              flex-direction: column; }\\n\\nion-card #no-seats-text {\\n  color: red; }\\n\\nion-card .footer {\\n  display: -webkit-flex;\\n  display: flex;\\n  -webkit-justify-content: center;\\n          justify-content: center;\\n  -webkit-align-items: center;\\n          align-items: center;\\n  margin: 10px; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb25leWJhL0Rlc2t0b3AvdW50aXRsZWQgZm9sZGVyL3RmbS9zcmMvYXBwL3BhZ2VzL3RhYnMvaG9tZS9yaWRlLWRldGFpbHMvcmlkZS1kZXRhaWxzLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUdJLGFBQWEsRUFBQTs7QUFIakI7RUFPSSxxQkFBYTtFQUFiLGFBQWE7RUFDYixzQ0FBOEI7VUFBOUIsOEJBQThCLEVBQUE7O0FBUmxDO0lBV00sWUFBWTtJQUNaLHFCQUFhO0lBQWIsYUFBYTtJQUNiLDJCQUFtQjtZQUFuQixtQkFBbUI7SUFDbkIsV0FBVyxFQUFBOztBQWRqQjtNQWlCUSxXQUFXO01BQ1gsWUFBWSxFQUFBOztBQWxCcEI7TUFzQlEsaUJBQWlCO01BQ2pCLHFCQUFhO01BQWIsYUFBYTtNQUNiLDhCQUFzQjtjQUF0QixzQkFBc0IsRUFBQTs7QUF4QjlCO0VBK0JJLFVBQVUsRUFBQTs7QUEvQmQ7RUFvQ0kscUJBQWE7RUFBYixhQUFhO0VBQ2IsK0JBQXVCO1VBQXZCLHVCQUF1QjtFQUN2QiwyQkFBbUI7VUFBbkIsbUJBQW1CO0VBQ25CLFlBQVksRUFBQSIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RhYnMvaG9tZS9yaWRlLWRldGFpbHMvcmlkZS1kZXRhaWxzLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1jYXJkIHtcblxuICBhZ20tbWFwIHtcbiAgICBoZWlnaHQ6IDMwMHB4O1xuICB9XG5cbiAgLmNhcmQtZHJpdmVyLWNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgICAudXNlci1pbmZvIHtcbiAgICAgIG1hcmdpbjogMTBweDtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgd2lkdGg6IDEwMCU7XG5cbiAgICAgIGlvbi1hdmF0YXIge1xuICAgICAgICB3aWR0aDogMzVweDtcbiAgICAgICAgaGVpZ2h0OiAzNXB4O1xuICAgICAgfVxuXG4gICAgICAudXNlci1uYW1lIHtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICB9XG5cbiAgICB9XG4gIH1cblxuICAjbm8tc2VhdHMtdGV4dCB7XG4gICAgY29sb3I6IHJlZDtcblxuICB9XG5cbiAgLmZvb3RlciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIG1hcmdpbjogMTBweDtcbiAgfVxufVxuIl19 */\"","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, NavigationExtras, Router} from '@angular/router';\nimport {Request} from '../../../../shared/models/Request';\nimport {RequestService} from '../../../../core/services/request.service';\nimport {Ride} from '../../../../shared/models/Ride';\nimport {User} from '../../../../shared/models/User';\nimport {State} from '../../../../shared/ui.utils';\nimport {Chat} from '../../../../shared/models/Chat';\nimport {ChatService} from '../../../../core/services/chat.service';\nimport {AngularFireDatabase} from '@angular/fire/database';\nimport {UserService} from '../../../../core/services/user.service';\nimport {RideService} from '../../../../core/services/ride.service';\nimport DirectionsRequest = google.maps.DirectionsRequest;\nimport DirectionsService = google.maps.DirectionsService;\nimport {MapsAPILoader} from '@agm/core';\nimport {ToastController} from '@ionic/angular';\n\n\n@Component({\n    selector: 'app-ride-details',\n    templateUrl: './ride-details.page.html',\n    styleUrls: ['./ride-details.page.scss'],\n})\nexport class RideDetailsPage implements OnInit {\n    public ride: Ride;\n    private currentUser: User;\n    public user: User;\n    public isBooked = false;\n    public availableSeats: number;\n\n    private latitude: number;\n    private longitude: number;\n    private zoom: number;\n    private direction: DirectionsRequest;\n    private directionsService = new DirectionsService();\n    public duration;\n    public distance;\n\n    constructor(private route: ActivatedRoute,\n                private router: Router,\n                private requestService: RequestService,\n                private chatService: ChatService,\n                private userService: UserService,\n                private rideService: RideService,\n                private db: AngularFireDatabase,\n                private mapsAPILoader: MapsAPILoader,\n                private toastController: ToastController\n    ) {\n        this.currentUser = this.userService.user.getValue();\n\n        this.route.queryParams.subscribe(params => {\n            if (this.router.getCurrentNavigation().extras.state) {\n                this.ride = this.router.getCurrentNavigation().extras.state.ride;\n                this.getAvailableSeats();\n            }\n        });\n\n        this.mapsAPILoader.load().then(() => {\n            this.getDirection();\n        });\n    }\n\n    ngOnInit() {\n        this.getUser();\n        this.checkBooking();\n    }\n\n    public getDirection(): void {\n        this.direction = {\n            origin: this.ride.origin,\n            destination: this.ride.destination,\n            travelMode: google.maps.TravelMode.DRIVING\n        };\n\n        this.directionsService.route(this.direction, result => {\n            this.duration = result.routes[0].legs[0].duration.text;\n            this.distance = result.routes[0].legs[0].distance.text;\n        });\n    }\n\n    private getUser(): void {\n        console.log(this.ride);\n        this.userService.getUser(this.ride.userId).subscribe(user =>\n            this.user = user);\n    }\n\n    private getAvailableSeats(): void {\n        let bookedSeats = 0;\n        if (this.ride.seatedUserIds) {\n            bookedSeats = this.ride.seatedUserIds.length;\n        }\n        this.availableSeats = this.ride.numberOfSeats - bookedSeats;\n    }\n\n    public createRequest(): void {\n        const request: Request = {\n            userId: this.currentUser.id,\n            dateTime: new Date(),\n            ride: this.ride,\n            state: State.pending\n        };\n        this.requestService.createRequest(request).then(async () => {\n            const toast = await this.toastController.create({\n                message: 'You have booked this ride succesfully! :)',\n                duration: 2000,\n                position: 'bottom',\n                animated: true,\n            });\n            toast.present();\n            this.router.navigateByUrl('tabs');\n        });\n    }\n\n    public goToDriverDetailsPage(): void {\n        const navigationExtras: NavigationExtras = {\n            state: {\n                userId: this.ride.userId\n            }\n        };\n        this.router.navigate(['public-profile'], navigationExtras);\n    }\n\n    public contactTheDriver(): void {\n        let chat: Chat = {\n            passengerUser: this.currentUser.id,\n            driverUser: this.ride.userId,\n            rideId: this.ride.id\n        };\n\n        this.chatService.getChatByRideId(this.ride.id).subscribe((chats: Chat[]) => {\n            if (chats[0]) {\n                chat = chats[0];\n                const navigationExtras: NavigationExtras = {\n                    state: {\n                        chatId: chat.id\n                    }\n                };\n                this.router.navigate(['chat'], navigationExtras);\n            } else {\n                chat.id = this.db.createPushId();\n                this.chatService.createChat(chat).then(result => {\n                    const navigationExtras: NavigationExtras = {\n                        state: {\n                            chatId: chat.id\n                        }\n                    };\n                    this.router.navigate(['chat'], navigationExtras);\n                });\n            }\n        });\n\n    }\n\n    private checkBooking(): void {\n    /*    if (this.ride.seatedUserIds) {\n            this.ride.seatedUserIds.forEach(userId => {\n                if (userId === this.currentUser.id) {\n                    this.isBooked = true;\n                }\n            });\n        }*/\n        this.requestService.getRequestsByRideId(this.ride.id).subscribe(requests =>\n        requests.forEach((request: Request) => {\n            if (request.userId === this.currentUser.id && request.state !== State.refused) {\n                this.isBooked = true;\n            }\n        }));\n    }\n\n\n}\n"],"sourceRoot":""}