{"version":3,"sources":["webpack:///./src/app/core/services/ride.service.ts","webpack:///./src/app/pages/tabs/messages/messages.module.ts","webpack:///./src/app/pages/tabs/messages/messages.page.html","webpack:///./src/app/pages/tabs/messages/messages.page.scss","webpack:///./src/app/pages/tabs/messages/messages.page.ts"],"names":[],"mappings":"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","file":"tabs-messages-messages-module.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Ride} from '../../shared/models/Ride';\nimport {AngularFireDatabase} from '@angular/fire/database';\nimport {Observable} from 'rxjs';\nimport {Request} from '../../shared/models/Request';\nimport {User} from '../../shared/models/User';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class RideService {\n    private collectionEndPoint = 'rides';\n\n    constructor(private db: AngularFireDatabase) {\n    }\n\n    public createRide(ride: Ride): Promise<void> {\n        ride.id = this.db.createPushId();\n        return this.db.object<Ride>(`${this.collectionEndPoint}/${ride.id}`).set(ride);\n    }\n\n    public updateRide(ride: Ride): Promise<void> {\n        return this.db.object<Ride>(`${this.collectionEndPoint}/${ride.id}`).update(ride);\n    }\n\n    public deleteRide(rideId: string): Promise<void> {\n        return this.db.object<Ride>(`${this.collectionEndPoint}/${rideId}`).remove();\n    }\n\n    public getRides(): Observable<Ride[]> {\n        return this.db.list<Ride>(this.collectionEndPoint, ref => ref.orderByChild('dateTime')\n            .startAt(new Date().getTime())).valueChanges();\n    }\n\n    public getRidesByUserId(userId: string): Observable<Ride[]> {\n        return this.db.list<Ride>(this.collectionEndPoint, ref => ref.orderByChild('userId').equalTo(userId)).valueChanges();\n    }\n\n    public getRide(rideId: string): Observable<Ride> {\n        return this.db.object<Ride>(`${this.collectionEndPoint}/${rideId}`).valueChanges();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { MessagesPage } from './messages.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MessagesPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [MessagesPage]\n})\nexport class MessagesPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Chats</ion-title>\\n  </ion-toolbar>\\n\\n\\n</ion-header>\\n\\n<ion-content>\\n\\n  <ion-list *ngFor=\\\"let chat of chats\\\">\\n      <ion-item (click)=\\\"goToChatPage(chat)\\\" class=\\\"chat-item\\\">\\n        <ion-avatar>\\n          <img [src]=\\\"chat.otherUser?.photo\\\">\\n        </ion-avatar>\\n        <div>\\n          <ion-label>{{chat.otherUser?.name}}</ion-label>\\n          <h3>{{chat.ride?.originName}} - {{chat.ride?.destinationName}}</h3>\\n        </div>\\n      </ion-item>\\n  </ion-list>\\n\\n<!--\\n    <ion-segment (ionChange)=\\\"segmentChanged($event)\\\" mode=\\\"md\\\" value=\\\"chats\\\">\\n      <ion-segment-button value=\\\"chats\\\">\\n        <ion-label>Chats</ion-label>\\n      </ion-segment-button>\\n      <ion-segment-button value=\\\"notifications\\\">\\n        <ion-label>Notifications</ion-label>\\n      </ion-segment-button>\\n    </ion-segment>\\n\\n\\n  <div *ngIf=\\\"currentSegment === 'chats'\\\">\\n    <ion-card mode=\\\"md\\\" *ngFor=\\\"let chat of chats\\\" (click)=\\\"goToChatPage(chat)\\\">\\n      <ion-card-content>\\n        <h2>{{chat.ride.originName}}\\n           -\\n          {{chat.ride.destinationName}}\\n        </h2>\\n      </ion-card-content>\\n    </ion-card>\\n  </div>\\n  <div *ngIf=\\\"currentSegment === 'requests'\\\">\\n    <ion-card mode=\\\"md\\\" *ngFor=\\\"let notification of notifications\\\" (click)=\\\"goToChatNotification(notification)\\\">\\n      <ion-card-content>\\n        {{notification.id}}\\n      </ion-card-content>\\n    </ion-card>\\n  </div>-->\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RhYnMvbWVzc2FnZXMvbWVzc2FnZXMucGFnZS5zY3NzIn0= */\"","import {Component, OnInit} from '@angular/core';\nimport {AuthService} from '../../../core/services/auth.service';\nimport {ChatService} from '../../../core/services/chat.service';\nimport {User} from '../../../shared/models/User';\nimport {Chat} from '../../../shared/models/Chat';\nimport {NavigationExtras, Router} from '@angular/router';\nimport {combineLatest, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {UserService} from '../../../core/services/user.service';\nimport {RequestService} from '../../../core/services/request.service';\nimport {RideService} from '../../../core/services/ride.service';\n\n@Component({\n    selector: 'app-messages',\n    templateUrl: './messages.page.html',\n    styleUrls: ['./messages.page.scss'],\n})\nexport class MessagesPage implements OnInit {\n    public currentSegment = 'chats';\n    public chats = [];\n    public notifications = [];\n    private chat$: Observable<any[]>;\n    private currentUser: User;\n    public user: User;\n\n\n    constructor(private authService: AuthService,\n                private chatService: ChatService,\n                private router: Router,\n                private userService: UserService,\n                private requestService: RequestService,\n                private rideService: RideService\n    ) {\n        this.currentUser = this.userService.user.getValue();\n    }\n\n    ngOnInit() {\n        this.getChats();\n        this.getNotifications();\n    }\n\n    segmentChanged(ev: any) {\n        this.currentSegment = ev.detail.value;\n    }\n\n    public getChats() {\n\n        const observablesToSubscribe = [\n            this.chatService.getChatsByUserId(this.currentUser.id, 'passengerUser'),\n            this.chatService.getChatsByUserId(this.currentUser.id, 'driverUser')\n        ];\n\n        this.chat$ = combineLatest(observablesToSubscribe).pipe(\n            map(([passengerChats, driverChats]) => {\n                return passengerChats.concat(driverChats);\n            })\n        );\n\n        this.chat$.subscribe(chats => {\n            console.log(chats);\n            this.chats = chats;\n            this.chats.forEach((chat) => {\n                if (this.currentUser.id === chat.driverUser) {\n                    this.userService.getUser(chat.passengerUser).subscribe(passengerUser => chat.otherUser = passengerUser);\n                } else {\n                    this.userService.getUser(chat.driverUser).subscribe(driverUser => chat.otherUser = driverUser);\n                }\n\n                this.rideService.getRide(chat.rideId).subscribe(ride => chat.ride = ride);\n            });\n        });\n    }\n\n    public goToChatPage(chat: Chat): void {\n        const navigationExtras: NavigationExtras = {\n            state: {\n                chatId: chat.id\n            }\n        };\n        this.router.navigate(['chat'], navigationExtras);\n    }\n\n    public getNotifications(): void {\n        this.requestService.getRequestsByReceiverId(this.currentUser.id).subscribe(requests => {\n            this.notifications = requests;\n        }\n       );\n    }\n\n    public goToChatNotification(notification: Request): void {\n        const navigationExtras: NavigationExtras = {\n            state: {\n                notification\n            }\n        };\n        this.router.navigate(['notification'], navigationExtras);\n    }\n\n}\n"],"sourceRoot":""}