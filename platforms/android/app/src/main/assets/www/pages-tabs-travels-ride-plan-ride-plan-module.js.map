{"version":3,"sources":["webpack:///./src/app/pages/tabs/travels/ride-plan/ride-plan.module.ts","webpack:///./src/app/pages/tabs/travels/ride-plan/ride-plan.page.html","webpack:///./src/app/pages/tabs/travels/ride-plan/ride-plan.page.scss","webpack:///./src/app/pages/tabs/travels/ride-plan/ride-plan.page.ts"],"names":[],"mappings":"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","file":"pages-tabs-travels-ride-plan-ride-plan-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RidePlanPage } from './ride-plan.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RidePlanPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [RidePlanPage]\n})\nexport class RidePlanPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Ride Plan</ion-title>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button></ion-back-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-card-subtitle>{{rideTimeDate | date:'dd MMM h:mm'}} </ion-card-subtitle>\\n      <ion-card-title>{{ride.originName}}\\n        <ion-icon name=\\\"arrow-round-forward\\\"></ion-icon>\\n        {{ride.destinationName}}\\n      </ion-card-title>\\n      <ion-item>\\n        <ion-avatar>\\n          <img [src]=\\\"driver?.photo || '/assets/icon/favicon.png'\\\">\\n        </ion-avatar>\\n        <ion-label>\\n          {{driver?.name}}\\n        </ion-label>\\n      </ion-item>\\n    </ion-card-header>\\n\\n    <ion-card-content>\\n      <ion-label>Passengers:</ion-label>\\n      <ion-list *ngIf=\\\"isDriver\\\" lines>\\n        <ion-item *ngFor=\\\"let user of ride.seatedUsers\\\" (click)=\\\"goToUserDetailsPage(user.id)\\\">\\n          <ion-avatar>\\n            <img [src]=\\\"user?.photo || '/assets/icon/favicon.png'\\\">\\n          </ion-avatar>\\n          <ion-label>\\n            {{user?.name}}\\n          </ion-label>\\n        </ion-item>\\n\\n        <ion-item *ngIf=\\\"!ride.seatedUsers\\\">\\n          <ion-label>No passengers</ion-label>\\n        </ion-item>\\n\\n\\n      </ion-list>\\n      <ion-list *ngIf=\\\"!isDriver\\\" lines=\\\"none\\\">\\n        <ion-item>\\n          <ion-label>{{ride.numberOfSeats}} seats available</ion-label>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label>status: {{request?.state}} </ion-label>\\n        </ion-item>\\n      </ion-list>\\n\\n\\n      <ion-button (click)=\\\"editRide()\\\" *ngIf=\\\"isDriver\\\">Edit Ride</ion-button>\\n      <ion-button  (click)=\\\"delete()\\\">Cancel Ride</ion-button>\\n\\n    <ion-button (click)=\\\"openModal()\\\" *ngIf=\\\"ride.seatedUserIds\\\">Start trip</ion-button>\\n\\n      <!-- <p *ngIf=\\\"dataReturned\\\">{{dataReturned}}</p>-->\\n\\n    </ion-card-content>\\n  </ion-card>\\n\\n  <ion-card *ngFor=\\\"let request of requests\\\" (click)=\\\"goToChatNotification(request)\\\">\\n    <ion-card-content>\\n      <ion-avatar>\\n        <img src=\\\"{{request.user?.photo}}\\\">\\n      </ion-avatar>\\n      <ion-label>{{request.user?.name}}</ion-label>\\n      <ion-label>Status: {{request.state}}</ion-label>\\n      <br>\\n      <ion-button (click)=\\\"acceptBooking()\\\">Accept</ion-button>\\n      <ion-button (click)=\\\"refuseBooking()\\\">Refuse</ion-button>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RhYnMvdHJhdmVscy9yaWRlLXBsYW4vcmlkZS1wbGFuLnBhZ2Uuc2NzcyJ9 */\"","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, NavigationExtras, Router} from '@angular/router';\nimport {Ride} from '../../../../shared/models/Ride';\nimport {Request} from '../../../../shared/models/Request';\nimport {RideService} from '../../../../core/services/ride.service';\nimport {RequestService} from '../../../../core/services/request.service';\nimport {State} from '../../../../shared/ui.utils';\nimport {RidePage} from '../ride/ride.page';\nimport {ModalController} from '@ionic/angular';\nimport {User} from '../../../../shared/models/User';\nimport {UserService} from '../../../../core/services/user.service';\n\n@Component({\n  selector: 'app-ride-plan',\n  templateUrl: './ride-plan.page.html',\n  styleUrls: ['./ride-plan.page.scss'],\n})\nexport class RidePlanPage implements OnInit {\n  public ride: Ride = null;\n  public request: Request = null;\n  public rideTimeDate;\n  public isDriver: boolean;\n  public driver: User;\n\n  public requests = [];\n\n  public currentUser: User;\n\n  dataReturned: any;\n\n  constructor(private route: ActivatedRoute,\n              private router: Router,\n              private rideService: RideService,\n              private requestSerivce: RequestService,\n              private modalController: ModalController,\n              private userService: UserService,\n              private requestService: RequestService) {\n    this.currentUser = this.userService.user.getValue();\n    this.route.queryParams.subscribe(params => {\n      if (this.router.getCurrentNavigation().extras.state) {\n        this.isDriver = this.router.getCurrentNavigation().extras.state.isDriver;\n        const rideId = this.router.getCurrentNavigation().extras.state.rideId;\n        this.getRide(rideId);\n        this.rideTimeDate = new Date(this.ride.dateTime);\n        this.userService.getUser(this.ride.userId).subscribe(user =>\n        this.driver = user);\n      }\n    });\n  }\n\n  ngOnInit() {\n    if (this.currentUser.id === this.ride.userId) {\n      this.getRequests();\n    }\n  }\n\n  private getRide(rideId: string) {\n    this.rideService.getRide(rideId).subscribe(ride =>\n    this.ride = ride);\n  }\n\n  public goToUserDetailsPage(userId: string): void {\n    const navigationExtras: NavigationExtras = {\n      state: {\n        userId\n      }\n    };\n    this.router.navigate(['public-profile'], navigationExtras);\n  }\n\n  public editRide(): void {\n    const navigationExtras: NavigationExtras = {\n      state: {\n        ride: this.ride\n      }\n    };\n    this.router.navigate(['ride-form'], navigationExtras);\n\n  }\n\n  public delete(): void {\n    if (this.isDriver) {\n      this.deleteRide();\n    } else {\n      this.deleteRequest();\n    }\n  }\n\n  private deleteRide(): void {\n    if (this.ride.seatedUserIds) {\n      // Send notification to passengers\n    }\n\n    this.rideService.deleteRide(this.ride.id).then(() =>\n        this.router.navigate(['tabs']));\n\n\n  }\n\n  public deleteRequest(): void {\n\n      // Send notification to driver\n\n    this.requestSerivce.deleteRequest(this.request.id).then(() =>\n        this.router.navigate(['tabs']));\n\n\n  }\n\n\n  async openModal() {\n    const modal = await this.modalController.create({\n      component: RidePage,\n      componentProps: {\n        ride: this.ride\n      }\n    });\n\n\n\n    modal.onDidDismiss().then((dataReturned) => {\n      if (dataReturned !== null) {\n        this.dataReturned = dataReturned.data;\n        // alert('Modal Sent Data :'+ dataReturned);\n      }\n    });\n\n    return await modal.present();\n  }\n/*\n  public acceptBooking(): void {\n    this.request.ride.seatedUserIds = [];\n    if (this.request.ride.numberOfSeats > 0) {\n      this.request.ride.numberOfSeats--;\n    }\n    this.request.ride.seatedUserIds.push(this.request.userId);\n    this.rideService.updateRide(this.request.ride);\n    this.request.state = State.accepted;\n    this.requestService.updateRequest(this.request);\n\n  }\n\n  public refuseBooking(): void {\n    this.request.state = State.refused;\n    this.requestService.updateRequest(this.request);\n  }*/\n\n\n  public getRequests(): void {\n    this.requestService.getRequestsByRideId(this.ride.id).subscribe(requests => {\n          this.requests = requests;\n          requests.forEach((request: Request, index) => this.getUser(request.userId, index));\n          console.log(requests);\n        }\n    );\n  }\n  public getUser(userId, index): void {\n    console.log(userId);\n    this.userService.getUser(userId).subscribe( user => this.requests[index].user = user);\n  }\n\n  public goToChatNotification(notification: Request): void {\n    const navigationExtras: NavigationExtras = {\n      state: {\n        notification\n      }\n    };\n    this.router.navigate(['notification'], navigationExtras);\n  }\n\n}\n"],"sourceRoot":""}